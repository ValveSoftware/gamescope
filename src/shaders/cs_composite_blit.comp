#version 450

#extension GL_EXT_scalar_block_layout : require
#extension GL_GOOGLE_include_directive : require

#include "descriptor_set.h"

layout(
  local_size_x = 8,
  local_size_y = 8,
  local_size_z = 1) in;

layout(std430, push_constant)
uniform layers_t {
    vec2 u_scale[MaxLayers];
    vec2 u_offset[MaxLayers];
    float u_opacity[MaxLayers];
    uint u_borderMask;
    uint u_frameId;
};

#include "composite.h"

vec4 sampleLayer(uint layerIdx, vec2 uv) {
    if ((c_ycbcrMask & (1 << layerIdx)) != 0)
        return srgbToLinear(sampleLayer(s_ycbcr_samplers[layerIdx], layerIdx, uv, false));
    return sampleLayer(s_samplers[layerIdx], layerIdx, uv, true);
}

void main() {
    uvec2 coord = uvec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
    uvec2 outSize = imageSize(dst);

    if (coord.x >= outSize.x || coord.y >= outSize.y)
        return;

    vec2 uv = vec2(coord);
    vec3 outputValue = vec3(0.0f);

    if (c_layerCount > 0)
        outputValue = sampleLayer(0, uv).rgb * u_opacity[0];

    for (int i = 1; i < c_layerCount; i++) {
        vec4 layerColor = sampleLayer(i, uv);
        // wl_surfaces come with premultiplied alpha, so that's them being
        // premultiplied by layerColor.a.
        // We need to then multiply that by the layer's opacity to get to our
        // final premultiplied state.
        // For the other side of things, we need to multiply by (1.0f - (layerColor.a * opacity))
        float opacity = u_opacity[i];
        float layerAlpha = opacity * layerColor.a;
        outputValue = layerColor.rgb * opacity + outputValue * (1.0f - layerAlpha);
    }

    outputValue = linearToSrgb(outputValue);
    imageStore(dst, ivec2(coord), vec4(outputValue, 0));

    // Indicator to quickly tell if we're in the compositing path or not.
    if (c_compositing_debug)
        compositing_debug(coord);
}
